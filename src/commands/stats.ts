import { SlashCommandBuilder, ChatInputCommandInteraction, ActionRowBuilder, StringSelectMenuBuilder } from 'discord.js';
import { UserModel } from '../models/User.js';

export const statsCommands = [
    {
        data: new SlashCommandBuilder()
            .setName('stats')
            .setDescription('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            .addSubcommand(sub => sub.setName('all').setDescription('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
            .addSubcommand(sub => sub.setName('mine').setDescription('–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
            .addSubcommand(sub => sub.setName('custom').setDescription('–°—Ç–∞—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')),

        async execute(interaction: ChatInputCommandInteraction) {
            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'all') {
                const users = await UserModel.find();
                const stats = users.map(u => `<@${u.discordId}>: ${u.gold}`).join('\n');
                return interaction.reply(`üìä –°—Ç–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü:\n${stats}`);
            } else if (subcommand === 'mine') {
                const user = await UserModel.findOne({ discordId: interaction.user.id });
                if (!user) {
                    return interaction.reply('‚ùå –¢—ã –±—ç–º–∂. –ü–æ —Ç–µ–±–µ –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
                }
                return interaction.reply(`üìä –ú–æ—ë –∑–æ–ª–æ—Ç–æ: **${user.gold}**`);
            } else if (subcommand === 'custom') {
                const users = await UserModel.find();

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã –∏–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const allMonths = new Set<string>();
                users.forEach(user => {
                    user.history.forEach(entry => {
                        allMonths.add(entry.month);
                    });
                });

                let months = Array.from(allMonths);
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é: –Ω–æ–≤–µ–µ -> —Å—Ç–∞—Ä–µ–µ
                months.sort((a, b) => {
                    const [aYear, aMonth] = a.split('-').map(Number);
                    const [bYear, bMonth] = b.split('-').map(Number);
                    if (aYear !== bYear) return bYear - aYear;
                    return bMonth - aMonth;
                });

                // –û—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 12 –º–µ—Å—è—Ü–µ–≤
                months = months.slice(0, 12);

                if (months.length < 2) {
                    return interaction.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞ –¥–∞–Ω–Ω—ã—Ö).');
                }

                const select = new StringSelectMenuBuilder()
                    .setCustomId('select-month')
                    .setPlaceholder('–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü')
                    .addOptions(
                        months.map(month => ({
                            label: month,
                            value: month,
                        }))
                    );

                const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(select);

                await interaction.reply({ content: 'üîß –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:', components: [row] });
            }
        },
    },
];
