import {
    SlashCommandBuilder,
    ActionRowBuilder,
    StringSelectMenuBuilder,
} from 'discord.js';
import { prisma } from '../lib/prisma.js'

export const statsCommands = [
    {
        data: new SlashCommandBuilder()
            .setName('stats')
            .setDescription('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            .addSubcommand(sub => sub.setName('all').setDescription('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
            .addSubcommand(sub => sub.setName('mine').setDescription('–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
            .addSubcommand(sub => sub.setName('custom').setDescription('–°—Ç–∞—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')),

        async execute(interaction) {
            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'all') {
                const users = await prisma.user.findMany();
                const stats = users.map(u => `<@${u.discordId}>: ${u.gold}`).join('\n');
                return interaction.reply(`üìä –°—Ç–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n${stats}`);
            }

            if (subcommand === 'mine') {
                const user = await prisma.user.findUnique({
                    where: { discordId: interaction.user.id },
                });

                if (!user) {
                    return interaction.reply('‚ùå –ü–æ —Ç–µ–±–µ –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
                }

                return interaction.reply(`üìä –¢–≤–æ—ë –∑–æ–ª–æ—Ç–æ: **${user.gold}**`);
            }

            if (subcommand === 'custom') {
                const users = await prisma.user.findMany({
                    include: { history: true },
                });

                const allMonths = new Set();
                users.forEach(user => {
                    user.history.forEach(entry => {
                        allMonths.add(entry.month);
                    });
                });

                let months = Array.from(allMonths);

                months.sort((a, b) => {
                    const [aYear, aMonth] = a.split('-').map(Number);
                    const [bYear, bMonth] = b.split('-').map(Number);
                    if (aYear !== bYear) return bYear - aYear;
                    return bMonth - aMonth;
                });

                months = months.slice(0, 12);

                if (months.length < 2) {
                    return interaction.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞.');
                }

                const select = new StringSelectMenuBuilder()
                    .setCustomId('select-month')
                    .setPlaceholder('–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü')
                    .addOptions(
                        months.map(month => ({
                            label: month,
                            value: month,
                        }))
                    );

                const row = new ActionRowBuilder().addComponents(select);

                return interaction.reply({
                    content: 'üîß –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:',
                    components: [row],
                });
            }
        },
    },
];
